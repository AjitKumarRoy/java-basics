//Order Agnostic Binary Search
//Here we don't know whether the array is sorted in ascending or descending order




import java.util.*;
public class Ajit{
    public static void main(String[] args){
        int[] arr = {-18, -12, -4, 0, 2, 3, 4, 15, 16, 18, 22, 45, 89}; 
        //int[] arr = {45, 42, 23, 21, 3, -1, -12};
        int target = 22;

        int ans = OrderAgnosticBinarySearch(arr, target);
        System.out.println(ans);
    }

    // return the index
    // return -1 if it does not exist
    public static int OrderAgnosticBinarySearch(int[] arr, int target){
        int start = 0;
        int end = arr.length-1;

        //find whether the array is sorted in ascending or descending
        Boolean isAsc = arr[start] < arr[end];

        while(start <= end){
            // find the middle element
            //int mid = (start+end)/2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start)/2;

            if (target == arr[mid]) {
                return mid; // and found
            }
            if (isAsc) { // for ascending order
                if(target < arr[mid]) {
                    end = mid-1;
                } else {
                    start = mid+1;
                }
            } else { // for descending order
                if(target > arr[mid]) {
                    end = mid-1;
                } else {
                    start = mid+1;
                }
            }
        }
        return -1; // we return this because -1 index doesn't exist
    }
}