// https://leetcode.com/problems/find-smallest-letter-greater-than-target/

You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

 

Example 1:

Input: letters = ["c","f","j"], target = "a"
Output: "c"
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.
Example 2:

Input: letters = ["c","f","j"], target = "c"
Output: "f"
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.
Example 3:

Input: letters = ["x","x","y","y"], target = "z"
Output: "x"
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].








-----------------------------------------------
//Solution -------------



//ceiling :- ceiling means the smallest element in the array that is greater than or equal to the target element

// APPROACH : ------------------------
//exact same approach as ceiling of number
//Ignore the target = what we are looking for
//arr = ['a', 'c', 'd', 'f'] target = 'f' :- when you find such a case where no element is greater
// than the target element then just return the first element of the array
//Here condition will be violated when start will be greater than end i.e. start = end + 1



import java.util.*;
public class Ajit{
    public static void main(String[] args){
        char[] arr = {'c', 'f', 'j'};
        char target = 'a';

        char ans = BinarySearch(arr,target);
        System.out.println(ans);

    }


    public static char BinarySearch(char[] arr, int target){

        //but what if the target is greater than the greatest character in the array
//        if(target >= arr[arr.length-1]){
//            return arr[0];
//        }

        int start = 0;
        int end = arr.length-1;
        while(start <= end){
            int mid = start + (end - start)/2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return arr[start % arr.length];
    }
}