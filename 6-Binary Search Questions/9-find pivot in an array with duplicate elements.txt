//Search in Rotated Sorted Array
//Rotated Binary Search
//find pivot in an array with duplicate elements

import java.util.*;
public class Ajit{
    public static void main(String[] args){
        int[] arr = {2,7,0,2,2};
//{2,5,6,0,0,1,2}; //{1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1};
        // {1,0,1,1,1} // 2,9,2,2,2,2 // [0,1,1,2,0,0]
        System.out.println(findPivot(arr));
    }


  

    //find pivot with duplicate elements
    public static int findPivot (int[] arr){
        int start = 0;
        int end = arr.length-1;
        while(start <= end){
            int mid = start + (end - start)/2;

            //four cases over here
            if(mid < end && arr[mid] > arr[mid + 1]){
                return mid;
            }
            if(mid > start && arr[mid] < arr[mid - 1]){
                return mid-1;
            }

            //if elements at middle, start and end are equal then just skip the duplicates

            if(arr[mid] == arr[start] && arr[mid] == arr[end]){
                //Skip the duplicates
                //Note : what if these elements at start and end were the pivot??
                //check if start is pivot
                if(arr[start] > arr[start + 1]){
                    return start;
                }
                start++;

                //check whether end is pivot
                if(arr[end] < arr[end - 1]){
                    return end - 1;
                }
                end--;
            }
            //left side is sorted, so pivot should be in right
            else if (arr[start] < arr[mid] || (arr[start] == arr[mid] && arr[mid] > arr[end])){
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
}




---------------------------------------------------------------------------------------------------------------------
//{2,5,6,0,0,1,2}; //{1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1};
        // {1,0,1,1,1} // 2,9,2,2,2,2 // [0,1,1,2,0,0]
//find pivot with duplicate elements
    
    public static int findPivot(int[] arr){


        int start = 0;
        int end = arr.length-1;



        while(start <= end){
            int mid = start + (end - start)/2;

            if(mid < end && arr[mid] > arr[mid+1]){
                return mid;
            }
            if(mid > start && arr[mid] < arr[mid-1]){
                return mid - 1;
            }

            //if elements at middle, start and end are equal then just skip the duplicates
            
            if(start < end && arr[mid] == arr[start] && arr[mid] == arr[end]){
                //Skip the duplicates
                //Note : what if these elements at start and end were the pivot??
                //check if start is pivot
                if(arr[start] > arr[start+1]){
                    return start;
                }
                start++;

                //check whether end is pivot
                if(arr[end] < arr[end-1]){
                    return end-1;
                }
                end--;
            }
            //left side is sorted, so pivot should be in right
            else if (arr[mid] > arr[start]  ||  arr[mid] == arr[start] && arr[mid] > arr[end]){
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }