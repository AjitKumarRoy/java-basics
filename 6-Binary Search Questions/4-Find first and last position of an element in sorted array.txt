https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/


Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]





--------------------------Solution--------------------------






//find first and last position of an element in sorted array


import java.util.*;
public class Ajit{
    public static void main(String[] args){
        int[] nums = {5,7,7,8,8,10};
        int target = 8;
        int[] ans = FindRange(nums,target);
        System.out.println(Arrays.toString(ans));
    }


    public static int[] FindRange(int[] nums, int target ){
        int[] ans = {-1,-1};
        ans[0] = BinarySearch(nums,target, true);
        if(ans[0] != -1){
            ans[1] = BinarySearch(nums, target, false);
        }
        return ans;
    }



    //this function just returns the index value of target
    public static int BinarySearch(int[] nums, int target, Boolean findStartIndex){
        int ans = -1;
        int start = 0;
        int end = nums.length-1;

        while(start <= end){
            int mid = start + (end-start)/2;

            if(target == nums[mid]){
                ans = mid;
                if(findStartIndex){
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }

            } else if (target < nums[mid]){
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return ans;
    }
}